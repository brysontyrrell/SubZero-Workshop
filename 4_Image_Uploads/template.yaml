AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:

  AppName:
    Type: String
    AllowedPattern: '^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$'
    MaxLength: 63

  RegionalCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /workshop/regional_certificate_arn

  HostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /workshop/hosted_zone_id

  UserPoolArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /workshop/cognito_pool_arn

Globals:
  Function:
    Runtime: python3.8
    Handler: index.lambda_handler

Resources:

  ImageStore:
    Type: AWS::S3::Bucket

# API Resources

  WorkshopApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      BinaryMediaTypes:
        - 'application/octet-stream'
        - 'image/*'
        - 'multipart/form-data'
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Ref AWS::StackName
        securityDefinitions:
          CognitoAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !Ref UserPoolArn
        paths:
          "/api/images":
            post:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Upload.Arn}/invocations
                contentHandling: "CONVERT_TO_BINARY"
              responses: {}
              security:
                - CognitoAuthorizer:
                    - "workshop-api/allow"
            get:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${List.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer:
                    - "workshop-api/allow"

  Upload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/post_image
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageStore
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageStore
      Events:
        PostImage:
          Type: Api
          Properties:
            Path: /api/images
            Method: post
            RestApiId: !Ref WorkshopApi

  List:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/get_images
      Events:
        GetImages:
          Type: Api
          Properties:
            Path: /api/images
            Method: get
            RestApiId: !Ref WorkshopApi

# Route 53 Domain Resources

  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "${AppName}.workshop.dev.jamfnimbus.cloud"
      RegionalCertificateArn: !Ref RegionalCertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref WorkshopApi
      Stage: Prod
    DependsOn:
      - WorkshopApi
      - WorkshopApiProdStage
      - ApiCustomDomain

  RegionalRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${AppName}.workshop.dev.jamfnimbus.cloud"
      SetIdentifier: !Sub '${AppName}-${AWS::Region}'
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId
      HostedZoneId: !Ref HostedZoneId
      Region: !Ref AWS::Region
      Type: A
